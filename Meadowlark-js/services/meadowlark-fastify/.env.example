#### Environment variables for security

# OAuth 2.0 signing key: base 64 encoded, 256 bit key. To create a new one,
# try running the application and accessing endpoint /{stage}/createSigningKey or run `openssl rand -base64 256`.
OAUTH_SIGNING_KEY=<signing key>
OWN_OAUTH_CLIENT_ID_FOR_CLIENT_AUTH=meadowlark_verify-only_key_1
OWN_OAUTH_CLIENT_SECRET_FOR_CLIENT_AUTH=meadowlark_verify-only_secret_1
OAUTH_SERVER_ENDPOINT_FOR_OWN_TOKEN_REQUEST=http://localhost:3000/local/oauth/token
OAUTH_SERVER_ENDPOINT_FOR_TOKEN_VERIFICATION=http://localhost:3000/local/oauth/verify
OAUTH_HARD_CODED_CREDENTIALS_ENABLED=false
# See the OAUTH.md file for more more OAUTH override settings

# If "true", request fails if no access token is presented
ACCESS_TOKEN_REQUIRED=true


#### Environment variables for running Meadowlark locally

# Local OpenSearch basic authentication username and password. Defaults should be fine.
OPENSEARCH_USERNAME=admin
OPENSEARCH_PASSWORD=admin
OPENSEARCH_ENDPOINT=http://localhost:9200

#### Configurable backend plugin PoC - set to an npm package name
DOCUMENT_STORE_PLUGIN=@edfi/meadowlark-mongodb-backend

QUERY_HANDLER_PLUGIN=@edfi/meadowlark-opensearch-backend

#LISTENER1_PLUGIN=@edfi/meadowlark-opensearch-backend

#LISTENER2_PLUGIN=@edfi/meadowlark-test-listener


#### MongoDB backend options

MONGO_URL=mongodb://<username>:<password>@mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
#MONGO_LOG_LEVEL=DEBUG


#### PostgreSQL backend options

#POSTGRES_USER=<username>
#POSTGRES_PASSWORD=<password>


#### Fastify options

# Rate limiter - default true
FASTIFY_RATE_LIMIT=true

# Listen port - default 3000
FASTIFY_PORT=3000


#### Deployment options
# This "stage" name will appear in the API routes
MEADOWLARK_STAGE=local

#### Logging
# Valid levels include: ERROR, WARNING, INFO, DEBUG
LOG_LEVEL=DEBUG
# When true, logs to plain text instead of JSON
IS_LOCAL=true


#### Authorization Server options
# Configurable authorization store plugin - set to an npm package name
AUTHORIZATION_STORE_PLUGIN=@edfi/meadowlark-mongodb-backend

### School year validation
# Although there should only be one year of data in an Ed-Fi API instance,
# there are cases where future years need to be recorded - for example, a 
# student's expected (future) graduation year. Rather than listing these
# out individually, provide a range of valid years. Any POST/PUT with
# a school year outside this range will be rejected with a 400 response.
BEGIN_ALLOWED_SCHOOL_YEAR=2022
END_ALLOWED_SCHOOL_YEAR=2034