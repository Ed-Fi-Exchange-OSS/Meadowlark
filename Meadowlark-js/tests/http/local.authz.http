# This test suite requires first clearing/dropping any existing "authorizations" collection in the
# "meadowlark" database in MongoDB


### Bootstrap an admin
# @name created_admin
POST http://localhost:3000/local/oauth/client
content-type: application/json

{
    "clientName": "Bootstrapped Admin",
    "roles": [
        "admin"
    ]
}

###
@admin_client_id={{created_admin.response.body.$.client_id}}
@admin_client_secret={{created_admin.response.body.$.client_secret}}

### Try bootstrapping another admin, should fail 401 no token provided
POST http://localhost:3000/local/oauth/client
content-type: application/json

{
    "clientName": "Bootstrapped Admin 2",
    "roles": [
        "admin"
    ]
}

### Authenticate as an admin
# @name admin1
POST http://localhost:3000/local/oauth/token
content-type: application/json

{
    "grant_type": "client_credentials",
    "client_id": "{{admin_client_id}}",
    "client_secret": "{{admin_client_secret}}"
}

###
@admin_token={{admin1.response.body.$.access_token}}
@auth_header_admin_1=Authorization: bearer {{admin1.response.body.$.access_token}}


### Retrieve the admin client
@admin_client_location = {{created_admin.response.headers.location}}
GET http://localhost:3000{{admin_client_location}}
{{ auth_header_admin_1 }}


### Create client as an admin, should succeed
# @name created_client1
POST http://localhost:3000/local/oauth/client
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "vendor"
    ]
}

### Retrieve the new client as admin
@created_client1_location = {{created_client1.response.headers.location}}
GET http://localhost:3000{{created_client1_location}}
{{ auth_header_admin_1 }}

###
@client1_client_id={{created_client1.response.body.$.client_id}}
@client1_client_secret={{created_client1.response.body.$.client_secret}}

### Authenticate as a non-admin
# @name client1
POST http://localhost:3000/local/oauth/token
content-type: application/json

{
    "grant_type": "client_credentials",
    "client_id": "{{client1_client_id}}",
    "client_secret": "{{client1_client_secret}}"
}

###
@auth_header_client_1=Authorization: bearer {{client1.response.body.$.access_token}}


#################### POST authorization client


### 403: can't retrieve a client with non-admin token
GET http://localhost:3000{{created_client1_location}}
{{ auth_header_client_1 }}

### Try creating client as a non-admin, should 403 Forbidden
POST http://localhost:3000/local/oauth/client
content-type: application/json
{{auth_header_client_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "vendor",
        "assessment"
    ]
}

### Try creating client with a bad token, should 401
POST http://localhost:3000/local/oauth/client
content-type: application/json
Authorization: bearer Not-A-Token

{
    "clientName": "Hometown SIS",
    "roles": [
        "vendor",
        "assessment"
    ]
}




### Create client with additional assessment role, should succeed
POST http://localhost:3000/local/oauth/client
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "vendor",
        "assessment"
    ]
}

### Send request body with empty body, should fail with 400 Bad Request
POST http://localhost:3000/local/oauth/client
content-type: application/json
{{auth_header_admin_1}}

{}

### Send request body without roles, should fail with 400 Bad Request
POST http://localhost:3000/local/oauth/client
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS"
}

### Send request body with invalid role, should fail with 400 Bad Request
POST http://localhost:3000/local/oauth/client
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "not vendor"
    ]
}

### Create client with one valid, one invalid role, should fail with 400 Bad Request
POST http://localhost:3000/local/oauth/client
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "vendor",
        "not assessment"
    ]
}

### Send request body with only assessment role, should fail with 400 Bad Request
POST http://localhost:3000/local/oauth/client
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "assessment"
    ]
}


#################### PUT authorization client

### Update client as an admin, should succeed
PUT http://localhost:3000/local/oauth/client/{{client1_client_id}}
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "vendor"
    ]
}


### Update with non-existent client id, should 404
PUT http://localhost:3000/local/oauth/client/11111111-1111-1111-1111-111111111111
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "vendor"
    ]
}


### Update client with additional assessment role, should succeed
PUT http://localhost:3000/local/oauth/client/{{client1_client_id}}
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "vendor",
        "assessment"
    ]
}

### Send request body with empty body, should fail with 400 Bad Request
PUT http://localhost:3000/local/oauth/client/{{client1_client_id}}
content-type: application/json
{{auth_header_admin_1}}

{}

### Send request body without roles, should fail with 400 Bad Request
PUT http://localhost:3000/local/oauth/client/{{client1_client_id}}
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS"
}

### Send request body with invalid role, should fail with 400 Bad Request
PUT http://localhost:3000/local/oauth/client/{{client1_client_id}}
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "not vendor"
    ]
}

### Create client with one valid, one invalid role, should fail with 400 Bad Request
PUT http://localhost:3000/local/oauth/client/{{client1_client_id}}
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "vendor",
        "not assessment"
    ]
}

### Send request body with only assessment role, should fail with 400 Bad Request
PUT http://localhost:3000/local/oauth/client/{{client1_client_id}}
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Hometown SIS",
    "roles": [
        "assessment"
    ]
}

#################### Request bearer token

### Authenticate as a previously created client, form url encoded, should succeed
# @name newClient
POST http://localhost:3000/local/oauth/token
content-type: application/x-www-form-urlencoded

grant_type=client_credentials&client_id={{client1_client_id}}&client_secret={{client1_client_secret}}

###
@newClientToken = {{newClient.response.body.$.access_token}}

### Use the new client's token
GET http://localhost:3000/local/v3.3b/ed-fi/contentClassDescriptors
authorization: bearer {{newClientToken}}

### Authenticate as a previously created client with wrong secret, form url encoded, should 401
POST http://localhost:3000/local/oauth/token
content-type: application/x-www-form-urlencoded

grant_type=client_credentials&client_id={{client1_client_id}}&client_secret=bad_secret

### Create client as an admin, should succeed
# @name client2
POST http://localhost:3000/local/oauth/client
content-type: application/json
{{auth_header_admin_1}}

{
    "clientName": "Totally new SIS",
    "roles": [
        "vendor"
    ]
}
###
@created_client_id_2={{client2.response.body.$.client_id}}
###
@created_client_secret_2={{client2.response.body.$.client_secret}}
###
POST http://localhost:3000/local/oauth/token
content-type: application/x-www-form-urlencoded

grant_type=client_credentials&client_id={{created_client_id_2}}&client_secret={{created_client_secret_2}}

### Reset secret for client 2
# @name reset
POST http://localhost:3000/local/oauth/client/{{created_client_id_2}}/reset
content-type: application/json
{{auth_header_admin_1}}

###
@reset_secret={{reset.response.body.$.client_secret}}
### Login with reset secret
# @name reset
POST http://localhost:3000/local/oauth/token
content-type: application/x-www-form-urlencoded

grant_type=client_credentials&client_id={{created_client_id_2}}&client_secret={{reset_secret}}

###
@reset_token={{reset.response.body.$.access_token}}

##
### TOKEN INTROSPECTION
##

### 200: Accept a current token created above
POST http://localhost:3000/local/oauth/verify
content-type: application/x-www-form-urlencoded
{{auth_header_admin_1}}

token={{reset_token}}

### 200: Ignore the token_type hint
POST http://localhost:3000/local/oauth/verify
content-type: application/x-www-form-urlencoded
{{auth_header_admin_1}}

token={{reset_token}}&token_type_hint=not_a_real_hint

### 400: JSON payload is not acceptable, per the specification
POST http://localhost:3000/local/oauth/verify
content-type: application/json
{{auth_header_admin_1}}

{
    "token": "{{reset_token}}"
}

### 200 (active: false): An expired token is not accepted
POST http://localhost:3000/local/oauth/verify
content-type: application/x-www-form-urlencoded
{{auth_header_admin_1}}

token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJlZC1maS1tZWFkb3dsYXJrIiwiYXVkIjoibWVhZG93bGFyayIsInN1YiI6InN1cGVyLWdyZWF0LVNJUyIsImNsaWVudF9pZCI6ImMzVndaWEl0WjNKbFlYUXRVMGxUIiwianRpIjoiZjQ2OTYyYjQtMzg4NS00Y2JiLWE4YjktMmY5NTY5OGNkM2U1IiwiaWF0IjoxNjU1MjQ0OTE3LCJleHAiOjE3MTg0MDF9.iuIAVDeszM_f-yzqylY65zim87WJtau-0HQUj30x66U

### 400: A modified token is not accepted 
# (invalid signature after modifying middle portion of JWT)
POST http://localhost:3000/local/oauth/verify
content-type: application/x-www-form-urlencoded
{{auth_header_admin_1}}

token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJlZC1maS1tZWFkb3dsYXJrIiwiYXVkIjoibWVhZG93bGFyayIsInN1YiI6InN1cGVyLWdyZWF0LVNJUyIsImp0aSI6IjgyNWQ0NGI4LWE4MTEtNGNmZi1iZWY4LWNjOGE2NjE2OWJlMCIsImNsaWVudF9pZCI6ImMzVndaWEl0WjNKbFlYUXRVMGxUIiwiaWF0IjoxNjU4NTI0MjM1LCJleHAiOjI2NTg1Mjc4MzV9.nj2ajxWjv0Vfqrx9200xVOds_hiOMPXcf6I0dYTkw_M

### 200: Non-admin can inspect own token
POST http://localhost:3000/local/oauth/verify
content-type: application/x-www-form-urlencoded
authorization: bearer {{reset_token}}

token={{reset_token}}

### 401: Non-admin can't inspect someone else's token
POST http://localhost:3000/local/oauth/verify
content-type: application/x-www-form-urlencoded
authorization: bearer {{reset_token}}

token={{admin_token}}

### 400: Can't validate some other random token
# (cribbed from https://jwt.io)
POST http://localhost:3000/local/oauth/verify
content-type: application/x-www-form-urlencoded
{{auth_header_admin_1}}

token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxOTE2MjM5MDIyfQ.DGme0_qbXW79j7VftKA1L1b6qugxEJ6-nqcmnvmi7DA

#### WON'T WORK UNTIL AFTER RND-354

# ### Delete the "reset" client
# DELETE http://localhost:3000/local/oauth/client/{{created_client_id_2}}
# content-type: application/x-www-form-urlencoded
# {{auth_header_admin_1}}

# ### Now verification of the "reset" client should fail
# POST http://localhost:3000/local/oauth/verify
# content-type: application/x-www-form-urlencoded
# {{auth_header_admin_1}}

# token={{reset_token}}

# ### And the "reset" client shouldn't be able to verify own token
# POST http://localhost:3000/local/oauth/verify
# content-type: application/x-www-form-urlencoded
# authorization: bearer {{reset_token}}

# token={{reset_token}}